<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Code Rocks!</title>
  
  <subtitle>blog about code and music</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://coderocks.co/"/>
  <updated>2019-06-09T18:22:21.804Z</updated>
  <id>http://coderocks.co/</id>
  
  <author>
    <name>Sergio Cano</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Custom Db logger library using Serilog (ASP.NET Core 2.2)</title>
    <link href="http://coderocks.co/2019/06/09/aspnetCore2-2-CustomDbLogger-Using-Serilog/"/>
    <id>http://coderocks.co/2019/06/09/aspnetCore2-2-CustomDbLogger-Using-Serilog/</id>
    <published>2019-06-09T15:31:28.000Z</published>
    <updated>2019-06-09T18:22:21.804Z</updated>
    
    <content type="html"><![CDATA[<p>Hello, long time ago since my last post, but I’m back and wanting to share more frecuent posts and be more active.<br>In this post I want to show you how we could create a custom logger that logs into the database. In this case we are going to use <strong>serilog</strong> (right now <a href="https://serilog.net" target="_blank" rel="noopener">2.8.0</a> (<a href="https://github.com/serilog" target="_blank" rel="noopener">here</a> you’ll see source code of different approaches) and we are going to create custom properties to add more detail.</p><h2 id="Why-Serilog"><a href="#Why-Serilog" class="headerlink" title="Why Serilog?"></a>Why Serilog?</h2><p>It allows us to do <strong>structured logging</strong> (the way serilog organizes the data makes it easier to query over the information), we could log information and properties (more info <a href="https://github.com/serilog/serilog/wiki/Structured-Data" target="_blank" rel="noopener">here</a>).</p><h2 id="The-Approach"><a href="#The-Approach" class="headerlink" title="The Approach"></a>The Approach</h2><p>This approach uses configuration from a configuration file and we are going to implement some stuff from code as well (<a href="https://github.com/serilog/serilog-sinks-mssqlserver#code--systemconfiguration" target="_blank" rel="noopener">configuration+code</a>).<br>In case you want to check in depth <a href="https://github.com/serilog/serilog-settings-configuration" target="_blank" rel="noopener">this</a> is a good introduction to understand how serilog uses entries from a configuration file.</p><h2 id="Hands-on"><a href="#Hands-on" class="headerlink" title="Hands on"></a>Hands on</h2><p>Let’s <strong>create a solution</strong> with 2 projects (web application project that will use a library). In the start page let’s create a <strong>blank solution</strong><br><img src="/content/images/2019/6/p1_20196_1.png" alt="New Project - Blank Solution" title="New Project - Blank Solution"></p><p>I’m going to call it <strong>aspnetCorelogging</strong>, we are going to <strong>create a web application</strong> to use our library<br><img src="/content/images/2019/6/p1_20196_2.png" alt="Configure new project" title="Configure new project"></p><p>Add new project<br><img src="/content/images/2019/6/p1_20196_3.png" alt="Add new project" title="Add new project"></p><p>I select ASP.NET Core Web Application<br><img src="/content/images/2019/6/p1_20196_4.png" alt="Asp.Net Core project" title="Asp.Net Core project"></p><p>I’m gonna call it <strong>Abc.Web</strong><br><img src="/content/images/2019/6/p1_20196_5.png" alt="Asp.Net Core project" title="Asp.Net Core project"></p><p>Let’s select <strong>api</strong> to use a controller that the template creates for us<br><img src="/content/images/2019/6/p1_20196_6.png" alt="Asp.net Core project - Api template" title="Asp.net Core project - Api template"></p><p>Let’s create a <strong>library</strong> to implement our <strong>custom logger</strong>.Add a new project then select Class library (.NET Core)<br><img src="/content/images/2019/6/p1_20196_7.png" alt="Add new project" title="Add new project"></p><p>I’m going to call this library <strong>CLogger</strong><br><img src="/content/images/2019/6/p1_20196_8.png" alt=".Net Core Library" title=".Net Core Library"></p><p>Add 2 items, an Interface called <strong>Ilogger</strong> and a class <strong>Logger</strong>, we would have something like<br><img src="/content/images/2019/6/p1_20196_9.png" alt=".Net Core Library - Items" title=".Net Core Library - Items"></p><p>The most basic way to log using serilog or any log is to send information classified by a particular log level (debug, information, warning, error, etc) <a href="https://github.com/serilog/serilog/wiki/Getting-Started" target="_blank" rel="noopener">more info</a>.<br>So we are going to create a <strong>generic way to log information</strong>, in <strong>LogInformation method</strong> we are going to pass the log level, exception (optional) and data to log (properties).</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LogInformation</span>(<span class="params">LogLevels eventLevel, <span class="keyword">string</span> information, Exception ex = <span class="literal">null</span>, <span class="keyword">params</span> <span class="keyword">object</span>[] values</span>)</span>;</span><br></pre></td></tr></table></figure><p>We need a structure for log levels, add a <strong>new item</strong> a “code file” called <strong>LogLevels</strong><br><img src="/content/images/2019/6/p1_20196_10.png" alt="Code file LogLevels" title="Code file LogLevels"></p><p>The web application is going to use our custom library, the library is going <strong>to use serilog</strong>, let’s <strong>add</strong> the <strong>packages</strong>. In the <strong>package manager console</strong> (Tools menu, nuget package manager), select as default project <strong>Clogger</strong><br><img src="/content/images/2019/6/p1_20196_11.png" alt="Package Manager Console" title="Package Manager Console"></p><p>Install all these packages</p><ol><li>Install-Package Serilog -Version 2.8.0</li><li>Install-Package Microsoft.Extensions.Configuration.Json</li><li>Install-Package Microsoft.Extensions.Configuration.EnvironmentVariables</li><li>Install-Package Serilog.Sinks.MSSqlServer</li></ol><p>The first one is needed to use <strong>serilog</strong>, 2 and 3 to support <strong>configuration settings</strong> from <strong>file</strong> and <strong>code</strong>. The forth one is needed <strong>to connect to database</strong> (sql server, but you can use <strong>any other database engine or any other origin/target provider</strong>, <a href="https://github.com/serilog/serilog/wiki/Provided-Sinks" target="_blank" rel="noopener">more info</a>).</p><h3 id="Logger"><a href="#Logger" class="headerlink" title="Logger"></a>Logger</h3><p>Let’s implement Logger<br>First we are going to create a Configuration property that’s going to give us information using configuration file (reference required Microsoft.Extensions.Configuration; )<br><img src="/content/images/2019/6/p1_20196_12.png" alt="Logger Implementation" title="Logger Implementation"></p><p>Let’s implement <strong>LogInformation</strong><br><img src="/content/images/2019/6/p1_20196_13.png" alt="LogInformation" title="LogInformation"></p><p>So we are going to get information from a <strong>configuration file</strong> let’s <strong>create appsettings.json json file</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"ConnectionStrings"</span>: &#123;</span><br><span class="line">    <span class="string">"LoggingDatabase"</span>: <span class="string">"SERVER=.\\SQLEXPRESS;Database=Logging;Trusted_Connection=True;ConnectRetryCount=0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"CustomLoggingLevel"</span>: <span class="string">"Debug"</span>,</span><br><span class="line">  <span class="string">"LoggingTable"</span>: <span class="string">"Logs"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Connection String</strong> is going to have the database connection where we are going to log<br><strong>CustomLoggingLevel</strong> is the initial level where the library is going to log, lower level than that, is going to be ignored.<br><strong>LoggingTable</strong> is the name of the table which stores the log data</p><p>Create a <strong>new database</strong><br><img src="/content/images/2019/6/p1_20196_14.png" alt="New Database" title="New Database"></p><p>Run this script <strong>to create</strong> the log <strong>table</strong> (based on <a href="https://github.com/serilog/serilog-sinks-mssqlserver#table-definition" target="_blank" rel="noopener">documentation</a> and <a href="https://github.com/serilog/serilog-sinks-mssqlserver#audit-sink-configuration" target="_blank" rel="noopener">this one</a>)</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  CREATE TABLE [Logs] (</span><br><span class="line">   [<span class="meta">Id</span>] <span class="function"><span class="keyword">int</span> <span class="title">IDENTITY</span>(<span class="params"><span class="number">1</span>,<span class="number">1</span></span>) NOT NULL,</span></span><br><span class="line"><span class="function">   [Source] <span class="title">nvarchar</span>(<span class="params"><span class="number">500</span></span>) NULL,</span></span><br><span class="line"><span class="function">   [Message] <span class="title">nvarchar</span>(<span class="params">max</span>) NULL,</span></span><br><span class="line"><span class="function">   [MessageTemplate] <span class="title">nvarchar</span>(<span class="params">max</span>) NULL,</span></span><br><span class="line"><span class="function">   [Level] <span class="title">nvarchar</span>(<span class="params"><span class="number">128</span></span>) NULL,</span></span><br><span class="line"><span class="function">   [TimeStamp] datetime NOT NULL,</span></span><br><span class="line"><span class="function">   [Exception] <span class="title">nvarchar</span>(<span class="params">max</span>) NULL,</span></span><br><span class="line"><span class="function">    -- store properties data <span class="keyword">as</span> <span class="title">JSON</span> (<span class="params">nvarchar</span>) or XML</span></span><br><span class="line"><span class="function">   --[Properties] <span class="title">nvarchar</span>(<span class="params">max</span>) NULL</span></span><br><span class="line"><span class="function">   [Properties] xml NULL</span></span><br><span class="line"><span class="function">   CONSTRAINT [PK_Logs] PRIMARY KEY <span class="title">CLUSTERED</span> (<span class="params">[Id] ASC</span>)</span></span><br><span class="line"><span class="function">)</span>;</span><br></pre></td></tr></table></figure><p>With an additional column <strong>Source</strong> to show how you can add more detail to the logs.</p><p>Let’s <strong>go back to Logger</strong> class to explain what we are doing when logging information<br><img src="/content/images/2019/6/p1_20196_15.png" alt="LogInformation" title="LogInformation"></p><p>From <strong>lines 20 to 22</strong> we get information from our configuration file appsettings.json (this one be created in the application that uses our library)<br>In <strong>line 26</strong> we get add additional columns to use the object when we instantiate LoggerConfiguration<br>LoggerConfiguration (<strong>lines 38-56</strong>, check <a href="https://github.com/serilog/serilog/wiki/Lifecycle-of-Loggers" target="_blank" rel="noopener">this</a> and <a href="https://github.com/serilog/serilog-sinks-mssqlserver#code-only-any-net-target" target="_blank" rel="noopener">this</a>).<br>We are doing <a href="https://github.com/serilog/serilog-sinks-mssqlserver#code--microsoftextensionsconfiguration" target="_blank" rel="noopener">this</a>.<br><img src="/content/images/2019/6/p1_20196_16.png" alt="LoggerConfiguration" title="LoggerConfiguration"></p><p>Going <strong>back to line 26</strong> in GetColumnsOptions method we are going to <strong>add</strong> an <strong><a href="https://github.com/serilog/serilog-sinks-mssqlserver#additionalcolumns" target="_blank" rel="noopener">additional column</a></strong> called <strong>Source</strong><br><img src="/content/images/2019/6/p1_20196_17.png" alt="Additional Columns" title="Additional Columns"></p><p>I recommend to <strong>enable log</strong> over serilog object that we are going to create, it’s going to <strong>log information</strong> in the console <strong>when debugging</strong> (on Output window you will see the information.<br><img src="/content/images/2019/6/p1_20196_18.png" alt="Log in console to trace any serilog issues" title="Log in console to trace any serilog issues"></p><h3 id="Web-App"><a href="#Web-App" class="headerlink" title="Web App"></a>Web App</h3><p>Let’s add <strong>reference</strong> the <strong>library</strong> in the web solution. Right click on <strong>Dependencies</strong> then <strong>add reference</strong>.<br><img src="/content/images/2019/6/p1_20196_19.png" alt="Add library reference" title="Add library reference"></p><p>Click on <strong>Projects</strong> select <strong>Clogger</strong><br><img src="/content/images/2019/6/p1_20196_20.png" alt="Add library reference" title="Add library reference"></p><p>Let’s edit <strong>appSettings.json</strong> in Abc.Web project. Add these <strong>config entries</strong><br><img src="/content/images/2019/6/p1_20196_21.png" alt="appSettings" title="AppSettings"></p><p>In <strong>Startup.cs</strong> we need <strong>register</strong> the <strong>dependency</strong><br><img src="/content/images/2019/6/p1_20196_22.png" alt="Register Dependencies" title="Register Dependencies"></p><p>When calling <strong>api/values</strong>, we are logging some information (the last in parameter you’ll see that contains the properties you want log besides the information you are logging).<br><img src="/content/images/2019/6/p1_20196_23.png" alt="Logging info in ValuesController" title="Logging info in ValuesController"></p><p>Serilog logs the properties that you added in a particular way (you should put your properties between <a href="https://github.com/serilog/serilog/wiki/Writing-Log-Events#message-template-syntax" target="_blank" rel="noopener">brackets</a>), let’s run the app and see how it logs in database<br><img src="/content/images/2019/6/p1_20196_24.png" alt="Log in Database" title="Log in Database"></p><p>There’s a column <strong>Properties</strong> that <strong>store all the properties</strong> we wanted to include when logging, in this case we let the LoggerConfiguration to <strong>store properties</strong> as a XML string (we can query using <strong>XQuery</strong>), but it also supports JSON (we can query using <strong>JSON path</strong>) you could check more info <a href="https://github.com/serilog/serilog-sinks-mssqlserver#querying-property-data" target="_blank" rel="noopener">here</a>.<br><img src="/content/images/2019/6/p1_20196_25.png" alt="Querying over log table" title="Querying over log table"></p><p>So as you can see <strong>Serilog offers a lot of features</strong> and different ways to log information into a target (cloud, txt, database, console, etc). I hope this post will be a starting point for you to create your own logger.</p><p>You can download the source from the <a href="https://github.com/skn0/aspnetCoreSerilogDb" target="_blank" rel="noopener">repository</a>.</p><h2 id="Bonus"><a href="#Bonus" class="headerlink" title="Bonus:"></a>Bonus:</h2><p>Don’t forget before starting to code, play a heavy list of songs. I found this really cool soul rock song by accident, so add it to your list.<br><a href="https://open.spotify.com/track/0w71NjrPNzBsa6yO0of2CZ" target="_blank" rel="noopener">The Altons - Gotcha</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hello, long time ago since my last post, but I’m back and wanting to share more frecuent posts and be more active.&lt;br&gt;In this post I want
      
    
    </summary>
    
    
      <category term="ASP.NET Core" scheme="http://coderocks.co/tags/ASP-NET-Core/"/>
    
      <category term="Serilog" scheme="http://coderocks.co/tags/Serilog/"/>
    
      <category term="Database Logger" scheme="http://coderocks.co/tags/Database-Logger/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET Core 2.0 - Using JQuery DataTables - Filtering (VSCode)</title>
    <link href="http://coderocks.co/2017/12/26/aspnetCore2-Using-JQuery-DataTables-Filtering/"/>
    <id>http://coderocks.co/2017/12/26/aspnetCore2-Using-JQuery-DataTables-Filtering/</id>
    <published>2017-12-27T00:40:00.000Z</published>
    <updated>2017-12-27T00:34:00.063Z</updated>
    
    <content type="html"><![CDATA[<p>Hello guys.<br>I’m going to continue with the <a href="http://coderocks.co/2017/01/10/aspnetCore-Using-JQuery-DataTables/">post</a> related to how to use jquery datatables, it will give you more context, because now we are going to filter the information retrieved by the dataTables from the backend and we are going to use asp.net core 2.0.</p><h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><p>Install .net core and aspnet .net core sdk’s, you can get them <a href="https://www.microsoft.com/net/download/windows" target="_blank" rel="noopener">here</a>.<br>Let’s create the web application, I’m going to use VS Code.</p><h2 id="Creating-web-app-based-on-template"><a href="#Creating-web-app-based-on-template" class="headerlink" title="Creating web app based on template"></a>Creating web app based on template</h2><p>First we have to create a folder in any location in our local PC, going to use <strong>C:\aspnetCoreJQueryDataTables-2.0</strong>, so let’s Run <strong>Visual Studio Code</strong> and open <strong>Terminal</strong><br><img src="/content/images/2017/12/p2_201712_1.png" alt="VS Code - Terminal" title="VS Code - Terminal"></p><p>Now using <strong>Terminal</strong> we can run some <strong>commands</strong> in .net Core CLI to create our project using templates.<br><a href="https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet?tabs=netcore2x" target="_blank" rel="noopener">Here</a> you can check all the commands, in this case we are going to use <strong><a href="https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-new?tabs=netcore2x" target="_blank" rel="noopener">dotnet new</a></strong> to create a web application based on a template.</p><p>In Terminal type <strong>dotnet new mvc -n Abc.Web</strong> (mvc: template, -n: name of the application folder), run it<br><img src="/content/images/2017/12/p2_201712_2.png" alt="VS Code - Terminal" title="VS Code - Terminal"></p><p>Now we have our application structure from the <strong>mvc</strong> template<br><img src="/content/images/2017/12/p2_201712_3.png" alt="VS Code - mvc template" title="VS Code - mvc template"></p><p>Don’t forget to install <strong>Debugger for Chrome</strong> extension, (as the name says, allows us to debug using chrome)<br><img src="/content/images/2017/12/p2_201712_4.png" alt="VS Code - Extensions" title="VS Code - Extensions"></p><p>Just search for <strong>debugger</strong> in the search input of <strong>Extensions</strong> Pane, then install it.<br><img src="/content/images/2017/12/p2_201712_5.png" alt="VS Code - Debugger for Chrome" title="VS Code - Debugger for Chrome"></p><p>To use the debugger we have to configure it using some files located at <strong>.vscode</strong> folder, the steps are detailed in this <a href="https://github.com/Microsoft/vscode-chrome-debug" target="_blank" rel="noopener">link</a> (very useful documentation), or just use those two files that I’m going to create in .vscode folder<br><strong>tasks.json</strong>, is going to <strong>make a build</strong> before doing a debugging<br><img src="/content/images/2017/12/p2_201712_6.png" alt="VS Code - tasks.json" title="VS Code - tasks.json"></p><p><strong>launch.json</strong> is going to <strong>run chrome</strong> and use a parameterized url to make a request to finally start debugging our application<br><img src="/content/images/2017/12/p2_201712_7.png" alt="VS Code - launch.json" title="VS Code - launch.json"></p><h2 id="Filtering-JQuery-DataTables"><a href="#Filtering-JQuery-DataTables" class="headerlink" title="Filtering JQuery-DataTables"></a>Filtering JQuery-DataTables</h2><p>I’m going to reuse some code from the <a href="http://coderocks.co/2017/01/10/aspnetCore-Using-JQuery-DataTables/">previous post</a> to ease this one.</p><p>In <strong>Models</strong> folder, let’s create an <strong>Item Model</strong><br><img src="/content/images/2017/12/p2_201712_8.png" alt="VS Code - Item Model" title="VS Code - Item Model"></p><p>Let’s create an <strong>api</strong> folder, inside create a file <strong>ItemsController.cs</strong><br><img src="/content/images/2017/12/p2_201712_9.png" alt="VS Code - ItemsController" title="VS Code - ItemsController"></p><p>We are going to use in <strong>/Home/Views/Index</strong> view this code<br><img src="/content/images/2017/12/p2_201712_10.png" alt="VS Code - Index view" title="VS Code - Index view"></p><p>Add a new parameter to support searching<br><img src="/content/images/2017/12/p2_201712_11.png" alt="VS Code - setting up JQuery DataTable" title="VS Code - setting up JQuery DataTable"></p><p>Let’s do some changes on <strong>Items Api</strong> to support searching<br>In <strong>ProcessCollection</strong> method we are going to check for another form data item “search[value]”<br><img src="/content/images/2017/12/p2_201712_12.png" alt="VS Code - ProcessCollection method" title="VS Code - ProcessCollection method"></p><p>Now we are going to add <strong>Where linq</strong> code, in this case we are going to when <strong>Name</strong> or <strong>Description</strong> contains the search criteria.<br><img src="/content/images/2017/12/p2_201712_13.png" alt="VS Code - where linq" title="VS Code - where linq"></p><p>Now we have to get total records filtered, we use <strong>GetTotalRecordsFiltered</strong> method for it.<br><img src="/content/images/2017/12/p2_201712_14.png" alt="VS Code - GetTotalRecordsFiltered method" title="VS Code - GetTotalRecordsFiltered method"></p><p>The request should look like this<br><img src="/content/images/2017/12/p2_201712_15.png" alt="VS Code - post request" title="VS Code - post request"></p><p>Let’s run it, click on debug icon then click on <strong>Start debugging</strong><br><img src="/content/images/2017/12/p2_201712_16.png" alt="VS Code - Start Debugging" title="VS Code - Start Debugging"></p><p>Now we’ll see a new search input field, when we type it will automatically filter<br><img src="/content/images/2017/12/p2_201712_17.png" alt="Now it&#39;s Filtering from backend side" title="Now it&#39;s Filtering from backend side"></p><p>You can download the source code from the <a href="https://github.com/skn0/aspnetCore2.0-JQueryDataTables-Filtering" target="_blank" rel="noopener">repository</a>.</p><h2 id="Bonus"><a href="#Bonus" class="headerlink" title="Bonus:"></a>Bonus:</h2><p>Taking someone’s words, Luther Allison was strong influence for blues 60’s musicians. Great solo with a really cool effect, with this song for the first time I heard the octave pedal, unique…<br><a href="https://open.spotify.com/track/6kJMw7nuBU7vKlOFI4lY3I" target="_blank" rel="noopener">Luther Allison -  Bad News Is Coming (live Montreaux 76-94)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hello guys.&lt;br&gt;I’m going to continue with the &lt;a href=&quot;http://coderocks.co/2017/01/10/aspnetCore-Using-JQuery-DataTables/&quot;&gt;post&lt;/a&gt; relat
      
    
    </summary>
    
    
      <category term="ASP.NET Core" scheme="http://coderocks.co/tags/ASP-NET-Core/"/>
    
      <category term="JQuery" scheme="http://coderocks.co/tags/JQuery/"/>
    
      <category term="DataTables" scheme="http://coderocks.co/tags/DataTables/"/>
    
      <category term="VSCode" scheme="http://coderocks.co/tags/VSCode/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET Core - Using JQuery DataTables</title>
    <link href="http://coderocks.co/2017/01/10/aspnetCore-Using-JQuery-DataTables/"/>
    <id>http://coderocks.co/2017/01/10/aspnetCore-Using-JQuery-DataTables/</id>
    <published>2017-01-11T00:00:23.000Z</published>
    <updated>2017-04-08T18:37:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hello.<br>Sometimes when we want to create an application we want to use plugins and not reinvent the wheel, in the case of showing information through tables there’s a very cool plugin (open source, very flexible and extensive), called <a href="https://datatables.net/" target="_blank" rel="noopener">DataTables</a> (jquery plugin). We are going to create an asp.net core web application, then we create an api which is going to request information from a collection (like a database).</p><p>The DataTables site has a detailed and useful documentation, there’s a <a href="https://datatables.net/manual/server-side" target="_blank" rel="noopener">section</a> related to getting information “server-side” in case you want to go deeper after reading this post. </p><p><img src="/content/images/2017/1/p1_20171_1.png" alt="ajax reques to server" title="ajax request to server"><br>In Server side approach we make an ajax request to the server and receive information using jquery.</p><p>Let’s start…<br>First we are going to create an asp.net core application. Create a <strong>blank solution</strong>, then create a <strong>new project</strong></p><p><img src="/content/images/2017/1/p1_20171_2.png" alt="new project in blank solution" title="new project in blank solution"></p><p>Choose <strong>.net core</strong> category, select <strong>asp.net core web application</strong> and give a name</p><p><img src="/content/images/2017/1/p1_20171_3.png" alt="ASP.Net Core Web Application" title="ASP.Net Core Web Application"></p><p>We select the <strong>Web Application</strong> Template<br><img src="/content/images/2017/1/p1_20171_4.png" alt="Web Application Template" title="Web Application Template"></p><h2 id="Adding-and-Configuring-DataTatables"><a href="#Adding-and-Configuring-DataTatables" class="headerlink" title="Adding and Configuring DataTatables"></a>Adding and Configuring DataTatables</h2><p>Now we are going to install datatables. The only library dependency is JQuery (using this web template we already have it)<br><img src="/content/images/2017/1/p1_20171_5.png" alt="JQuery" title="JQuery"></p><h3 id="Dependencies-for-DataTables"><a href="#Dependencies-for-DataTables" class="headerlink" title="Dependencies for DataTables"></a>Dependencies for DataTables</h3><p>There is a css library, it’s optional, it gives us a default styling. <strong>DataTables</strong> library is very flexible and we can use any other styling framework (like foundation, bootstrap, material, etc, check <a href="https://datatables.net/examples/styling/" target="_blank" rel="noopener">here</a>), we are going to use the default way.<br>Let’s add some sections in the <strong>layout</strong> view to add required files.<br>I could add directly the libraries in layout but in this case I want to show you the other way, so we are going to create two sections (styles and scripts) to add the css file and js file in the view to be more specific when loading the libraries.</p><p>Inside <strong>head</strong> tag add<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@RenderSection(“styles”, required: <span class="literal">false</span>)</span><br></pre></td></tr></table></figure></p><p><img src="/content/images/2017/1/p1_20171_6.png" alt="Section styles" title="Section styles"></p><p>At the end of <strong>body</strong> tag add<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@RenderSection(“scripts”, required : <span class="literal">false</span>)</span><br></pre></td></tr></table></figure></p><p><img src="/content/images/2017/1/p1_20171_7.png" alt="Section scripts" title="Section scripts"></p><p>We are going to navigate through <strong>Home/Index</strong> view and remove some auto-generated code.<br>Let’s remove all of this code<br><img src="/content/images/2017/1/p1_20171_8.png" alt="home/index view" title="home/index view"></p><p>We are going to have something like this in <strong>Home/Index</strong> view (or whichever order you want to have)<br><img src="/content/images/2017/1/p1_20171_9.png" alt="home/index view structure" title="home/index structure"></p><p>Let’s add a reference to the datatable style<br><img src="/content/images/2017/1/p1_20171_10.png" alt="Reference in style section" title="Reference in style section"></p><p>The very basic table structure (<a href="https://datatables.net/manual/installation" target="_blank" rel="noopener">installation</a>) we need is something like this one<br><img src="/content/images/2017/1/p1_20171_11.png" alt="sample basic html DataTable" title="sample basic html DataTable"></p><p>In the js side<br><img src="/content/images/2017/1/p1_20171_12.png" alt="sample js code to load DataTable" title="sample js code to load DataTable"><br>So as you see the table id is very important.</p><p>Let’s add the table structure<br><img src="/content/images/2017/1/p1_20171_13.png" alt="html DataTable" title="html DataTable"></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">"row"</span>&gt;</span><br><span class="line">    &lt;div <span class="keyword">class</span>=<span class="string">"col-md-12"</span>&gt;</span><br><span class="line">        &lt;div <span class="keyword">class</span>=<span class="string">"panel panel-primary"</span>&gt;</span><br><span class="line">            &lt;div <span class="keyword">class</span>=<span class="string">"panel-heading"</span>&gt;</span><br><span class="line">                &lt;h3 <span class="keyword">class</span>=<span class="string">"panel-title"</span>&gt;Items&lt;/h3&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div <span class="keyword">class</span>=<span class="string">"panel-body"</span>&gt;</span><br><span class="line">                &lt;table id=<span class="string">"ItemsTable"</span> <span class="keyword">class</span>=<span class="string">"table table-striped table-bordered table-hover responsive"</span> width=<span class="string">"100%"</span>&gt;</span><br><span class="line">                    &lt;thead <span class="keyword">class</span>=<span class="string">"thin-border-bottom"</span>&gt;</span><br><span class="line">                        &lt;tr&gt;</span><br><span class="line">                            &lt;th&gt;Item Id&lt;/th&gt;</span><br><span class="line">                            &lt;th&gt;Name&lt;/th&gt;</span><br><span class="line">                            &lt;th&gt;Description&lt;/th&gt;</span><br><span class="line">                            &lt;th&gt;&lt;/th&gt;</span><br><span class="line">                        &lt;/tr&gt;</span><br><span class="line">                    &lt;/thead&gt;</span><br><span class="line">                &lt;/table&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>So as you see our table is <strong>ItemsTable</strong> and has 3 columns. Now we need to add the js code in <strong>scripts</strong> section.<br><img src="/content/images/2017/1/p1_20171_14.png" alt="js code for DataTable" title="js code for DataTable"></p><p>Let’s see what we’ve got<br><img src="/content/images/2017/1/p1_20171_15.png" alt="js code for DataTable" title="js code for DataTable"></p><ol><li>Reference to the DataTable library, in this example case I set a reference to DataTable CDN.</li><li>Through ajax call with a POST request to /api/items we are going to request information (if we are <a href="https://en.wikipedia.org/wiki/Representational_state_transfer" target="_blank" rel="noopener">RESTful</a> strict, we should use GET Method to <strong>get</strong> information not POST but I prefer this way to avoid limitations related to form data through the query string, so up to you if you want to use GET).</li><li>In columns we bind the information we want to display so the result from the ajax call should return at least that data (records with itemId, name, description), if you see columns is an array, it contains an object of each column, also you can add a function inside each column in case you want to add more logic (in future post we’ll see it).</li><li>We can specify to sort and page the information we want to display, in that way we will see page buttons and sort icons on each row header.</li></ol><p>If you run the app, we’ll only see this<br><img src="/content/images/2017/1/p1_20171_16.png" alt="running the app no data in DataTable" title="running the app no data in DataTable"></p><h2 id="Server-Side-API-to-return-data"><a href="#Server-Side-API-to-return-data" class="headerlink" title="Server Side - API to return data"></a>Server Side - API to return data</h2><h3 id="Creating-Api"><a href="#Creating-Api" class="headerlink" title="Creating Api"></a>Creating Api</h3><p>Let’s add some code to see results in the table. Add a new controller inside an api folder (or whichever the folder you want).<br><img src="/content/images/2017/1/p1_20171_17.png" alt="new controller in api folder" title="new controller in api folder"></p><p><img src="/content/images/2017/1/p1_20171_18.png" alt="items controller" title="items controller"></p><p>We are going to use <strong>post</strong> method so let’s remove the auto-generated code.<br>In the <strong>post</strong> method we are going to return a custom result so we’re going to change void to <a href="https://docs.microsoft.com/en-us/aspnet/core/api/microsoft.aspnetcore.mvc.iactionresult" target="_blank" rel="noopener"><strong>IActionResult</strong></a> and return an OK</p><p>Initial version<br><img src="/content/images/2017/1/p1_20171_19.png" alt="post method in controller" title="post method in controller"><br>After changes<br><img src="/content/images/2017/1/p1_20171_20.png" alt="post method in controller" title="post method in controller"></p><p>Let’s add a model class named <strong>Item</strong> in Models folder<br><img src="/content/images/2017/1/p1_20171_21.png" alt="add new class" title="add new class"></p><p>Add 3 properties<br><img src="/content/images/2017/1/p1_20171_22.png" alt="add properties to class" title="add properties to class"></p><h3 id="Returning-Data-from-the-Api"><a href="#Returning-Data-from-the-Api" class="headerlink" title="Returning Data from the Api"></a>Returning Data from the Api</h3><p>Let’s go back to <strong>ItemsController.cs</strong> to create a private method to return data (to ease the post we’re not going to do the DB plumbing, in a different post we can work that part).</p><p>Let’s create a GetData private method like this one<br><img src="/content/images/2017/1/p1_20171_23.png" alt="GetData method" title="GetData method"></p><p>We are going to return a structure like this </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"draw"</span>:<span class="number">1</span>,</span><br><span class="line">  <span class="string">"recordsTotal"</span>:<span class="number">2</span>,</span><br><span class="line">  <span class="string">"recordsFiltered"</span>:<span class="number">2</span>,</span><br><span class="line">  <span class="string">"data"</span>:[</span><br><span class="line">    [ <span class="number">1010</span>,<span class="string">"RYban 12300"</span>,<span class="string">"Polarized sunglasses"</span>],</span><br><span class="line">    [ <span class="number">1011</span>,<span class="string">"HDMI Cable"</span>,<span class="string">"Basic hdmi cable 3 feet"</span>]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In DataTables documentation you’ll see the required structure (<a href="https://datatables.net/examples/data_sources/server_side" target="_blank" rel="noopener">server side documentation - data source</a> and <a href="https://www.datatables.net/manual/server-side" target="_blank" rel="noopener">server side documentation</a>)<br><img src="/content/images/2017/1/p1_20171_24.png" alt="json structure to return to the client" title="json structure to return to the client"></p><p>In our code let’s call the data and return a proper json result<br><img src="/content/images/2017/1/p1_20171_25.png" alt="return json from Api post method" title="return json from Api post method"></p><p>If we run the application we’ll see data in our table<br><img src="/content/images/2017/1/p1_20171_26.png" alt="DataTable shows data" title="DataTable shows data"></p><p>If we consume the API directly (using any api client like postman) we’ll see the json structure<br><img src="/content/images/2017/1/p1_20171_27.png" alt="consuming api from postman" title="consuming api from postman"></p><p>If we click on any button page we will get a kind of never ending <strong>“Processing”</strong><br><img src="/content/images/2017/1/p1_20171_28.png" alt="processing issue" title="processing issue"><br>Which means we have to add more code to make a proper pagination from the server side</p><h3 id="under-the-hood-form-data"><a href="#under-the-hood-form-data" class="headerlink" title="under the hood - form data"></a>under the hood - form data</h3><p>If we use the dev tools from the browser, in the network section we’ll see the json request.<br>Click on the request “items/api” at the left column.<br><img src="/content/images/2017/1/p1_20171_29.png" alt="dev tools - form data" title="dev tools - form data"></p><p>In <strong>Headers/Form Data</strong> (form data is the information we sent from client to server in the request process) for each column there is information that could help us to paginate our result from the data source</p><p><strong>Start :</strong> from where it starts to paginate.<br><strong>Length:</strong> number of records per page (we get this one from <strong>show entries</strong> dropdownlist).<br><strong>order[0][column]:</strong> order column index.<br><strong>order[0][dir]:</strong> ascending or descending order to show the information.<br><strong>colum[?][data]:</strong> name of the column of the data returned by the server.<br><strong>search[value]:</strong> value to search in the collection (we get this one from <strong>search</strong> field).</p><p>When the request occurs, as a client we send data (client side), we are going to get <strong>Form</strong> data (server side), it has information of the columns, pagination and ordering, all related to the Datatable.</p><h3 id="In-the-Api-Paging-Ordering-information"><a href="#In-the-Api-Paging-Ordering-information" class="headerlink" title="In the Api - Paging, Ordering information"></a>In the Api - Paging, Ordering information</h3><p>Let’s go to <strong>ItemsController.cs</strong> to add more code<br><img src="/content/images/2017/1/p1_20171_30.png" alt="post method in controller" title="post method in controller"><br>We get all the form data.</p><p>Then we create a method to get the information about ordering and pagination (<strong>requestFormData</strong>) and query over the information in this case using linq in a collection (<strong>lstElements</strong>)<br><img src="/content/images/2017/1/p1_20171_31.png" alt="post method in controller" title="post method in controller"></p><p>Private method<br><img src="/content/images/2017/1/p1_20171_32.png" alt="ProcessCollection method" title="ProcessCollection method"></p><p><img src="/content/images/2017/1/p1_20171_33.png" alt="GetProperty method" title="GetProperty method"><br>Get property helps us to get a property object model related to a particular column name.</p><p>Going back to the Post method now we can have a processed collection (paginated and ordered)<br><img src="/content/images/2017/1/p1_20171_34.png" alt="post method in controller" title="post method in controller"></p><p>Now in the custom response in <strong>Data</strong> we are sending the processed collection. In <strong>Draw</strong> (number of times the datatable plugin has generated the table) we send the value from the form data. In <strong>RecordsFiltered</strong> and <strong>RecordsTotal</strong> we are sending the total items from initial collection.</p><p>If we run the application we’ll see it working<br><img src="/content/images/2017/1/p1_20171_35.png" alt="DataTable works" title="DataTable works"></p><p>Pagination works<br><img src="/content/images/2017/1/p1_20171_36.png" alt="DataTable pagination works" title="DataTable pagination works"></p><p>Ordering works<br><img src="/content/images/2017/1/p1_20171_37.png" alt="DataTable ordering works" title="DataTable ordering works"></p><p>You can download the source code from the <a href="https://github.com/skn0/aspnetCoreJQueryDataTables" target="_blank" rel="noopener">repository</a>.</p><p>In a future post we are going to filter using the <strong>search</strong> field.</p><h2 id="Bonus"><a href="#Bonus" class="headerlink" title="Bonus:"></a>Bonus:</h2><p>From the Guitar Hero Hendrix, a better version than the original (Bob Dylan, song author, endorse it).<br><a href="https://play.spotify.com/track/2aoo2jlRnM3A0NyLQqMN2f" target="_blank" rel="noopener">Jimi Hendrix -  All Along The Watchtower</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hello.&lt;br&gt;Sometimes when we want to create an application we want to use plugins and not reinvent the wheel, in the case of showing infor
      
    
    </summary>
    
    
      <category term="ASP.NET Core" scheme="http://coderocks.co/tags/ASP-NET-Core/"/>
    
      <category term="JQuery" scheme="http://coderocks.co/tags/JQuery/"/>
    
      <category term="DataTables" scheme="http://coderocks.co/tags/DataTables/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET Core - DAL and Entities from existing DB (using EF Core 1.1)</title>
    <link href="http://coderocks.co/2016/12/17/aspnetCore-DAL-and-Entities-from-existing-DB-using-EFCore-1-1/"/>
    <id>http://coderocks.co/2016/12/17/aspnetCore-DAL-and-Entities-from-existing-DB-using-EFCore-1-1/</id>
    <published>2016-12-18T03:10:03.000Z</published>
    <updated>2017-04-08T18:37:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hi guys, in this post I want to show you an approach for ASP.NET Core (in this moment we have the <a href="https://github.com/aspnet/Home/wiki/Roadmap" target="_blank" rel="noopener">1.0.3</a>) to show information through a data access layer from an existing Database using the new <a href="https://docs.microsoft.com/en-us/ef/core/index" target="_blank" rel="noopener">Entity Framework Core</a> (right now we have the EF Core <a href="https://github.com/aspnet/EntityFramework/wiki/Roadmap" target="_blank" rel="noopener">1.1</a>). Let’s start!…</p><h2 id="Database-Project"><a href="#Database-Project" class="headerlink" title="Database Project"></a>Database Project</h2><p>First we create a blank solution, then we can add the project we want. In the solution root we add a new project.<br><img src="/content/images/2016/12/p1_1.png" alt="create a new project" title="solution root - new project"></p><p>Select SQL Server Database Project<br><img src="/content/images/2016/12/p1_2.png" alt="database project" title="database project"></p><p>Then we create two basic tables (Product and ProductType)<br><img src="/content/images/2016/12/p1_3.png" alt="product table" title="product table"></p><p><img src="/content/images/2016/12/p1_4.png" alt="product type table" title="product type table"></p><p>Then we create a simple stored procedure to get a product with a given Identifier<br><img src="/content/images/2016/12/p1_5.png" alt="stored procedure" title="stored procedure"></p><p>We build and then we can publish the Db<br><img src="/content/images/2016/12/p1_6.png" alt="publish db" title="publish db"></p><p>When we try to publish our DB at first time, we have to setup a profile to future deployments, in <strong>Database name</strong> I omit the dots and I use capital letters to keep a good convention (class naming) when we get the entities.<br><img src="/content/images/2016/12/p1_7.png" alt="setup publish db" title="setup publish db"><br>In <strong>Target database connection</strong> to get a proper connection string we click on <strong>Edit.</strong></p><p>We set <strong>server name</strong> with “.” or “localhost” or the name of your machine. <strong>Authentication</strong> windows authentication or sql authentication in case we want it, we click on OK to get the connection string.<br><img src="/content/images/2016/12/p1_8.png" alt="db connection" title="db connection"></p><p><img src="/content/images/2016/12/p1_9.png" alt="save connection" title="save connection"><br>Then we click on <strong>Save Profile As</strong></p><p><img src="/content/images/2016/12/p1_10.png" alt="load profile" title="load profile"><br>So in a future deployment we can reuse those settings clicking on <strong>Load Profile</strong> then searching the previous generated xml.</p><p>Let’s click on <strong>Publish</strong> to generate the DB, we will see something like this<br><img src="/content/images/2016/12/p1_11.png" alt="publish results" title="publish results"></p><p>And this<br><img src="/content/images/2016/12/p1_12.png" alt="db results" title="db results"><br>Now we have a DB. </p><h2 id="Web-and-DAL-Projects"><a href="#Web-and-DAL-Projects" class="headerlink" title="Web and DAL Projects"></a>Web and DAL Projects</h2><p>Let’s create two projects, an asp.net core application project and a .net core library which will be the DAL.<br><img src="/content/images/2016/12/p1_13.png" alt="solution root - new project" title="solution root - new project"></p><p>We are going to create .net core library with the name Abc.DAL (data access layer)<br><img src="/content/images/2016/12/p1_14.png" alt="new project" title="new project"><br><img src="/content/images/2016/12/p1_15.png" alt="new project - dal" title="new project - dal"></p><p>According to <a href="https://docs.microsoft.com/en-us/ef/core/get-started/aspnetcore/existing-db" target="_blank" rel="noopener">Microsoft documentation</a> we are not able to create Entities from an existing DB in a .net core library, that’s the reason we are going to get the entities using the asp.net core application and then move the entities in the DAL library.</p><p>Let’s create an asp.net core web application<br><img src="/content/images/2016/12/p1_16.png" alt="new web project" title="new web project"></p><p>We are going to set the <strong>name</strong> Abc.Web<br><img src="/content/images/2016/12/p1_17.png" alt="name project" title="name project"></p><h3 id="Setting-up-Web"><a href="#Setting-up-Web" class="headerlink" title="Setting up Web"></a>Setting up Web</h3><p>We select <strong>Web Application Template</strong><br><img src="/content/images/2016/12/p1_18.png" alt="web application template" title="web application template"></p><p>We are going to install these packages<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- Microsoft.EntityFrameworkCore.SqlServer</span><br><span class="line">- Microsoft.EntityFrameworkCore.Tools –Pre</span><br><span class="line">- Microsoft.EntityFrameworkCore.Design</span><br><span class="line">- Microsoft.EntityFrameworkCore.SqlServer.Design</span><br></pre></td></tr></table></figure></p><p>We can add them manually using project.json or we can use the nugget package manager.<br><img src="/content/images/2016/12/p1_19.png" alt="project.json" title="project.json"><br>Using the nugget package manager console (Tools-&gt; Nugget Package Manager-&gt; Package Manager Console) don’t forget to select the proper project<br><img src="/content/images/2016/12/p1_20.png" alt="package manager console" title="package manager console"></p><p>Let’s install the packages, in order we should </p><p><img src="/content/images/2016/12/p1_21.png" alt="packages installation" title="packages installation"></p><p>Then we can run the following instruction in the console to get the models from the existing db<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Scaffold-DbContext <span class="string">"Server=localhost;Database=AbcDatabase;Trusted_Connection=True;MultipleActiveResultSets=True"</span> Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models</span><br></pre></td></tr></table></figure></p><p><img src="/content/images/2016/12/p1_22.png" alt="Scaffold-DbContext" title="Scaffold-DbContext"></p><p><strong>-OutputDir “Folder”</strong> you can specify a particular folder name.</p><p>Now we can see a new folder with the models of the existing db<br><img src="/content/images/2016/12/p1_23.png" alt="entities" title="entities"></p><p>Now we can move the models to the .net core library. So let’s copy the Models folder and paste it on Abc.Dal project, we will have something like this<br><img src="/content/images/2016/12/p1_24.png" alt="entities in DAL" title="entities in DAL"></p><p>Now we can remove Models folder in Abc.Web</p><h3 id="Setting-up-DAL"><a href="#Setting-up-DAL" class="headerlink" title="Setting up DAL"></a>Setting up DAL</h3><p>We should install the packages red marked in the using<br><img src="/content/images/2016/12/p1_25.png" alt="dependencies in DAL" title="dependencies in DAL"></p><p>For all the classes in Models folder we should update the namespace according to the project and remove the partial definition (partial means one class divided into different files)<br><img src="/content/images/2016/12/p1_26.png" alt="DbContext in Dal" title="DbContext in Dal"></p><p>We will have something like this<br><img src="/content/images/2016/12/p1_27.png" alt="DbContext modified in Dal" title="DbContext modified in Dal"></p><p>Let’s add the Abc.DAL reference in Abc.Web<br>Right click on References then click on <strong>Add Reference</strong><br><img src="/content/images/2016/12/p1_28.png" alt="Add DAL reference in Web" title="Add DAL reference in Web"></p><p>We are going to add a Solution reference, so let’s check Abc.DAL then click on OK<br><img src="/content/images/2016/12/p1_29.png" alt="reference manager in Web" title="reference manager in Web"></p><p>Back in Abc.DAL project<br>In the Database Context there’s a suggestion that says<br>“To protect potentially sensitive information in your connection string, you should move it out of source code”<br><img src="/content/images/2016/12/p1_30.png" alt="DBContext in DAL" title="DBContext in DAL"></p><p>We will move the connection string to a particular file for security purposes.</p><p>Let’s copy the connections string, then go to the folder appsettings.json (this is a file to create any entry setting we need for our project) in the Abc.Web project<br><img src="/content/images/2016/12/p1_31.png" alt="appsettings.json in Web" title="appsettings.json in Web"></p><p>As we know it’s a json file so let’s create a new connection string object with the connection string we copied before<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"ConnectionStrings"</span>: &#123;</span><br><span class="line">    <span class="string">"AbcDatabase"</span>: <span class="string">"Data Source=localhost;Initial Catalog=AbcDatabase;Integrated Security=True;MultipleActiveResultSets=True;"</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>Would be something like this<br><img src="/content/images/2016/12/p1_32.png" alt="appsettings.json modified in Web" title="appsettings.json modified in Web"><br>Save the json file.</p><p>Then go to the Startup.cs in Abc.Web (remember this is a file where we inject our dependencies to the pipeline)<br><img src="/content/images/2016/12/p1_33.png" alt="startup" title="startup"></p><p>In configure services we can add any service we want in the pipeline, so we need the IConfigurationRoot (allows us to get access to configuration properties) and the database context (don’t forget that the order matters, so we will add them before Mvc).<br>It would be something like this</p><p><img src="/content/images/2016/12/p1_34.png" alt="ConfigureServices" title="ConfigureServices"></p><p>Let’s go back to Abc.DAL in our Database Context class<br><img src="/content/images/2016/12/p1_35.png" alt="DbContext" title="DbContext"></p><p>We will add a constructor and call the base class constructor as well, we will inject IConfiguration in the constructor (line 12). Then we will get the connection string using the configuration interface (line 23). Now we can save and go back to Abc.Web to test if everything works.<br>Just before going back to Abc.Web, let’s insert some records.<br><img src="/content/images/2016/12/p1_36.png" alt="sql statements" title="sql statements"></p><p>Go back to Abc.Web, to do a quick test just add in home controller a query to get all the products, so I’m going to use linq to perform the query.<br><img src="/content/images/2016/12/p1_37.png" alt="LinQ query" title="LinQ query"></p><p>We join the tables and return an anonymous type to make a custom result, let’s run the application.<br><img src="/content/images/2016/12/p1_38.png" alt="results LinQ query in Db" title="results LinQ query in Db"></p><p>Good news, now we have data from the db. Finally we have an approach to create a DAL from an existing DB in asp.net core.<br>You can download the source from the <a href="https://github.com/skn0/aspnetCoreDALEFCore" target="_blank" rel="noopener">repository</a>.</p><h2 id="Bonus"><a href="#Bonus" class="headerlink" title="Bonus:"></a>Bonus:</h2><p>Please just before starting to code, play this track, with the forgiveness of the guitar hero Hendrix, this is my favorite version of Little Wing. Stevie Ray Vaughan great blues rock guitarist, he recorded a lot of great songs.<br><a href="https://play.spotify.com/track/5XNpdKmlLJPUbwKQceX2tW" target="_blank" rel="noopener">Stevie Ray Vaughan -  Little Wing</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hi guys, in this post I want to show you an approach for ASP.NET Core (in this moment we have the &lt;a href=&quot;https://github.com/aspnet/Home
      
    
    </summary>
    
    
      <category term="ASP.NET Core" scheme="http://coderocks.co/tags/ASP-NET-Core/"/>
    
      <category term="Entity Framework Core" scheme="http://coderocks.co/tags/Entity-Framework-Core/"/>
    
  </entry>
  
  <entry>
    <title>Hello World!</title>
    <link href="http://coderocks.co/2016/12/10/hello-world/"/>
    <id>http://coderocks.co/2016/12/10/hello-world/</id>
    <published>2016-12-11T02:14:01.000Z</published>
    <updated>2017-04-08T18:37:23.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Hello</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">       <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"Hello World!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Welcome to my blog. I’ll be posting findings and experiences of my day to day coding.<br>So in every post you’ll have some code and some good track suggestion as a bonus.</p><p><strong>Bonus:</strong><br>Audioslave is a very cool hard-rock superband (Soundgarden + RATM), check the audio and search the video is a very good one.<br><a href="https://play.spotify.com/track/1Qdnvn4XlmZANCVy3XjrQo" target="_blank" rel="noopener">Audioslave -  Show Me How To Live</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
    
      <category term="Hello World" scheme="http://coderocks.co/tags/Hello-World/"/>
    
  </entry>
  
</feed>
